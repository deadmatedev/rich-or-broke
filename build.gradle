plugins {
    id 'java'
    id 'org.springframework.boot' version '2.5.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.barfuin.gradle.jacocolog' version '1.2.4'
    id 'com.google.cloud.tools.jib' version '3.1.4'
    id 'org.sonarqube' version '3.3'
    id 'maven-publish'
}

group = 'com.deadmate'
version = '1.0'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springBootVersion', '2.5.4')
    set('springCloudVersion', '2020.0.3')
    set('springFeignVersion', '3.0.3')
    set('lombokVersion', '1.18.20')
    set('jacocoVersion', '0.8.6')
    set('githubUser', 'deadmatedev')
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign:${springFeignVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    implementation "org.jacoco:org.jacoco.cli:${jacocoVersion}"
    implementation "org.jacoco:org.jacoco.agent:${jacocoVersion}"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
    // dependsOn cleanTest
    // testLogging.showStandardStreams = true
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [ '**\\model\\**', '**\\config\\**' ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            excludes = ['*.model.*', '*.config.*']
            limit {
                minimum = 1.0
            }
        }
    }
}

check {
    dependsOn jacocoTestCoverageVerification
}

jib {
    def user = System.getenv('DOCKERHUB_USER') ?: ''
    def pwd = System.getenv('DOCKERHUB_PWD') ?: ''
    from {
        image = 'azul/zulu-openjdk-alpine:11.0.10-jre'
    }
    to {
        image = "${user}/${project.name}:${project.version}"
        tags = [ project.version, 'latest' ]
        auth {
            username = user
            password = pwd
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "${githubUser}_rich-or-broke"
        property "sonar.organization", "${githubUser}"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/${githubUser}/${project.name}"
            credentials {
                username = githubUser
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from components.java
        }
    }
}
